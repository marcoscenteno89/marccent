{"ast":null,"code":"var _jsxFileName = \"/home/marcos/app/marccent/client/src/components/var.js\";\nimport React, { Component } from 'react';\nimport { RevColor, GetMode, GetRgb, LinGrad } from \"./inc/inc\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/React.createContext();\nexport class ThemeProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id: 0\n    };\n\n    this.getThemes = async () => {\n      const url = process.env.REACT_APP_STRAPIURL;\n      let theme = JSON.parse(localStorage.getItem('marccent_theme'));\n\n      if (!theme) {\n        theme = {};\n        const themeJson = await fetch(`${url}themes/`);\n        const darkJson = await fetch(`${url}options?name=theme_dark`);\n        const lightJson = await fetch(`${url}options?name=theme_light`);\n        theme.list = await themeJson.json();\n        let dark = await darkJson.json();\n        let light = await lightJson.json();\n        theme.id = theme.list[0].id;\n        theme.rgb = {\n          dark: GetRgb(dark[0].value),\n          light: GetRgb(light[0].value),\n          primary: GetRgb(theme.list[0].primary),\n          secondary: GetRgb(theme.list[0].secondary)\n        };\n        theme.hex = {\n          dark: dark[0].value,\n          light: light[0].value,\n          primary: theme.list[0].primary,\n          secondary: theme.list[0].secondary\n        };\n        theme.grad = LinGrad(theme.list[0].primary, theme.list[0].secondary);\n        theme.is_dark = true;\n        theme.glass = false;\n        theme.mode = GetMode(theme, 1);\n        theme.rev = RevColor(theme, 1);\n      }\n\n      this.setState(theme, () => this.storeTheme(this.state));\n    };\n\n    this.newState = n => {// let active = {\n      //   id: theme[0].id,\n      //   rgb: {\n      //     dark: temp.rgb.dark,\n      //     light: temp.rgb.light,\n      //     primary: GetRgb(theme[0].primary),\n      //     secondary: GetRgb(theme[0].secondary)\n      //   },\n      //   hex: {\n      //     dark: temp.hex.dark,\n      //     light: temp.hex.light,\n      //     primary: theme[0].primary,\n      //     secondary: theme[0].secondary\n      //   },\n      //   grad: LinGrad(theme[0].primary, theme[0].secondary)\n      // }\n      // active.mode = GetMode(active, 1);\n      // active.rev = RevColor(active, 1);\n      // this.setState(active, () => this.storeTheme(this.state));\n    };\n\n    this.addTheme = theme => {\n      console.log('at add theme');\n      console.log(theme);\n      let temp = this.state.list;\n      let largest = this.state.list[0].id;\n\n      for (let i of this.state.list) {\n        if (i.id > largest) largest = i.id;\n      }\n\n      theme.id = largest + 1;\n      temp.push(theme);\n      this.setState({\n        list: temp\n      }, () => {\n        this.updateTheme(theme.id);\n        this.storeTheme(this.state);\n      });\n    };\n\n    this.removeTheme = id => {\n      if (id === this.state.id) {\n        this.updateTheme(this.state.list[0].id);\n      }\n\n      let updated = this.state.list.filter(theme => theme.id !== id);\n      this.setState({\n        list: updated\n      }, () => this.storeTheme(this.state));\n    };\n\n    this.updateTheme = id => {\n      let current = this.state.list.filter(i => i.id === id)[0];\n      let temp = this.state;\n      this.setState({\n        id: current.id,\n        rgb: {\n          dark: temp.rgb.dark,\n          light: temp.rgb.light,\n          primary: GetRgb(current.primary),\n          secondary: GetRgb(current.secondary)\n        },\n        hex: {\n          dark: temp.hex.dark,\n          light: temp.hex.light,\n          primary: current.primary,\n          secondary: current.secondary\n        },\n        grad: LinGrad(current.primary, current.secondary)\n      }, () => this.storeTheme(this.state));\n    };\n\n    this.isGlass = i => {\n      this.setState({\n        glass: i,\n        mode: GetMode(this.state, this.state.glass ? 0.6 : 1),\n        rev: RevColor(this.state, 1)\n      }, () => this.storeTheme(this.state));\n    };\n\n    this.isDark = i => {\n      this.setState({\n        is_dark: i,\n        mode: GetMode(this.state, this.state.glass ? 0.6 : 1),\n        rev: RevColor(this.state, 1)\n      }, () => this.storeTheme(this.state));\n    };\n\n    this.storeTheme = i => localStorage.setItem('marccent_theme', JSON.stringify(i));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n      value: {\n        theme: this.state,\n        isDark: this.isDark,\n        isGlass: this.isGlass,\n        updateTheme: this.updateTheme,\n        getThemes: this.getThemes,\n        addTheme: this.addTheme,\n        removeTheme: this.removeTheme\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/marcos/app/marccent/client/src/components/var.js"],"names":["React","Component","RevColor","GetMode","GetRgb","LinGrad","ThemeContext","createContext","ThemeProvider","state","id","getThemes","url","process","env","REACT_APP_STRAPIURL","theme","JSON","parse","localStorage","getItem","themeJson","fetch","darkJson","lightJson","list","json","dark","light","rgb","value","primary","secondary","hex","grad","is_dark","glass","mode","rev","setState","storeTheme","newState","n","addTheme","console","log","temp","largest","i","push","updateTheme","removeTheme","updated","filter","current","isGlass","isDark","setItem","stringify","render","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,OAApC,QAAmD,WAAnD;;AAEA,OAAO,MAAMC,YAAY,gBAAGN,KAAK,CAACO,aAAN,EAArB;AAEP,OAAO,MAAMC,aAAN,SAA4BP,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAE3CQ,KAF2C,GAEnC;AACNC,MAAAA,EAAE,EAAE;AADE,KAFmC;;AAAA,SAM3CC,SAN2C,GAM/B,YAAY;AACtB,YAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAxB;AACA,UAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAX,CAAZ;;AACA,UAAI,CAACJ,KAAL,EAAY;AACVA,QAAAA,KAAK,GAAG,EAAR;AACA,cAAMK,SAAS,GAAG,MAAMC,KAAK,CAAE,GAAEV,GAAI,SAAR,CAA7B;AACA,cAAMW,QAAQ,GAAG,MAAMD,KAAK,CAAE,GAAEV,GAAI,yBAAR,CAA5B;AACA,cAAMY,SAAS,GAAG,MAAMF,KAAK,CAAE,GAAEV,GAAI,0BAAR,CAA7B;AACAI,QAAAA,KAAK,CAACS,IAAN,GAAa,MAAMJ,SAAS,CAACK,IAAV,EAAnB;AACA,YAAIC,IAAI,GAAG,MAAMJ,QAAQ,CAACG,IAAT,EAAjB;AACA,YAAIE,KAAK,GAAG,MAAMJ,SAAS,CAACE,IAAV,EAAlB;AACAV,QAAAA,KAAK,CAACN,EAAN,GAAWM,KAAK,CAACS,IAAN,CAAW,CAAX,EAAcf,EAAzB;AACAM,QAAAA,KAAK,CAACa,GAAN,GAAY;AACVF,UAAAA,IAAI,EAAEvB,MAAM,CAACuB,IAAI,CAAC,CAAD,CAAJ,CAAQG,KAAT,CADF;AAEVF,UAAAA,KAAK,EAAExB,MAAM,CAACwB,KAAK,CAAC,CAAD,CAAL,CAASE,KAAV,CAFH;AAGVC,UAAAA,OAAO,EAAE3B,MAAM,CAACY,KAAK,CAACS,IAAN,CAAW,CAAX,EAAcM,OAAf,CAHL;AAIVC,UAAAA,SAAS,EAAE5B,MAAM,CAACY,KAAK,CAACS,IAAN,CAAW,CAAX,EAAcO,SAAf;AAJP,SAAZ;AAMAhB,QAAAA,KAAK,CAACiB,GAAN,GAAY;AACVN,UAAAA,IAAI,EAAEA,IAAI,CAAC,CAAD,CAAJ,CAAQG,KADJ;AAEVF,UAAAA,KAAK,EAAEA,KAAK,CAAC,CAAD,CAAL,CAASE,KAFN;AAGVC,UAAAA,OAAO,EAAEf,KAAK,CAACS,IAAN,CAAW,CAAX,EAAcM,OAHb;AAIVC,UAAAA,SAAS,EAAEhB,KAAK,CAACS,IAAN,CAAW,CAAX,EAAcO;AAJf,SAAZ;AAMAhB,QAAAA,KAAK,CAACkB,IAAN,GAAa7B,OAAO,CAACW,KAAK,CAACS,IAAN,CAAW,CAAX,EAAcM,OAAf,EAAwBf,KAAK,CAACS,IAAN,CAAW,CAAX,EAAcO,SAAtC,CAApB;AACAhB,QAAAA,KAAK,CAACmB,OAAN,GAAgB,IAAhB;AACAnB,QAAAA,KAAK,CAACoB,KAAN,GAAc,KAAd;AACApB,QAAAA,KAAK,CAACqB,IAAN,GAAalC,OAAO,CAACa,KAAD,EAAQ,CAAR,CAApB;AACAA,QAAAA,KAAK,CAACsB,GAAN,GAAYpC,QAAQ,CAACc,KAAD,EAAQ,CAAR,CAApB;AACD;;AAED,WAAKuB,QAAL,CAAcvB,KAAd,EAAqB,MAAM,KAAKwB,UAAL,CAAgB,KAAK/B,KAArB,CAA3B;AACD,KAtC0C;;AAAA,SAwC3CgC,QAxC2C,GAwChCC,CAAC,IAAI,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA5D0C;;AAAA,SA8D3CC,QA9D2C,GA8DhC3B,KAAK,IAAI;AAClB4B,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY7B,KAAZ;AACA,UAAI8B,IAAI,GAAG,KAAKrC,KAAL,CAAWgB,IAAtB;AACA,UAAIsB,OAAO,GAAG,KAAKtC,KAAL,CAAWgB,IAAX,CAAgB,CAAhB,EAAmBf,EAAjC;;AACA,WAAK,IAAIsC,CAAT,IAAc,KAAKvC,KAAL,CAAWgB,IAAzB,EAA+B;AAC7B,YAAIuB,CAAC,CAACtC,EAAF,GAAOqC,OAAX,EAAoBA,OAAO,GAAGC,CAAC,CAACtC,EAAZ;AACrB;;AACDM,MAAAA,KAAK,CAACN,EAAN,GAAWqC,OAAO,GAAG,CAArB;AACAD,MAAAA,IAAI,CAACG,IAAL,CAAUjC,KAAV;AACA,WAAKuB,QAAL,CAAc;AACZd,QAAAA,IAAI,EAAEqB;AADM,OAAd,EAEG,MAAM;AACP,aAAKI,WAAL,CAAiBlC,KAAK,CAACN,EAAvB;AACA,aAAK8B,UAAL,CAAgB,KAAK/B,KAArB;AACD,OALD;AAMD,KA9E0C;;AAAA,SAgF3C0C,WAhF2C,GAgF5BzC,EAAD,IAAQ;AACpB,UAAIA,EAAE,KAAK,KAAKD,KAAL,CAAWC,EAAtB,EAA0B;AACxB,aAAKwC,WAAL,CAAiB,KAAKzC,KAAL,CAAWgB,IAAX,CAAgB,CAAhB,EAAmBf,EAApC;AACD;;AAED,UAAI0C,OAAO,GAAG,KAAK3C,KAAL,CAAWgB,IAAX,CAAgB4B,MAAhB,CAAuBrC,KAAK,IAAIA,KAAK,CAACN,EAAN,KAAaA,EAA7C,CAAd;AACA,WAAK6B,QAAL,CAAc;AAAEd,QAAAA,IAAI,EAAE2B;AAAR,OAAd,EAAiC,MAAM,KAAKZ,UAAL,CAAgB,KAAK/B,KAArB,CAAvC;AACD,KAvF0C;;AAAA,SAyF3CyC,WAzF2C,GAyF5BxC,EAAD,IAAQ;AACpB,UAAI4C,OAAO,GAAG,KAAK7C,KAAL,CAAWgB,IAAX,CAAgB4B,MAAhB,CAAuBL,CAAC,IAAIA,CAAC,CAACtC,EAAF,KAASA,EAArC,EAAyC,CAAzC,CAAd;AACA,UAAIoC,IAAI,GAAG,KAAKrC,KAAhB;AACA,WAAK8B,QAAL,CAAc;AACZ7B,QAAAA,EAAE,EAAE4C,OAAO,CAAC5C,EADA;AAEZmB,QAAAA,GAAG,EAAE;AACHF,UAAAA,IAAI,EAAEmB,IAAI,CAACjB,GAAL,CAASF,IADZ;AAEHC,UAAAA,KAAK,EAAEkB,IAAI,CAACjB,GAAL,CAASD,KAFb;AAGHG,UAAAA,OAAO,EAAE3B,MAAM,CAACkD,OAAO,CAACvB,OAAT,CAHZ;AAIHC,UAAAA,SAAS,EAAE5B,MAAM,CAACkD,OAAO,CAACtB,SAAT;AAJd,SAFO;AAQZC,QAAAA,GAAG,EAAE;AACHN,UAAAA,IAAI,EAAEmB,IAAI,CAACb,GAAL,CAASN,IADZ;AAEHC,UAAAA,KAAK,EAAEkB,IAAI,CAACb,GAAL,CAASL,KAFb;AAGHG,UAAAA,OAAO,EAAEuB,OAAO,CAACvB,OAHd;AAIHC,UAAAA,SAAS,EAAEsB,OAAO,CAACtB;AAJhB,SARO;AAcZE,QAAAA,IAAI,EAAE7B,OAAO,CAACiD,OAAO,CAACvB,OAAT,EAAkBuB,OAAO,CAACtB,SAA1B;AAdD,OAAd,EAeG,MAAM,KAAKQ,UAAL,CAAgB,KAAK/B,KAArB,CAfT;AAgBD,KA5G0C;;AAAA,SA8G3C8C,OA9G2C,GA8GhCP,CAAD,IAAO;AACf,WAAKT,QAAL,CAAc;AACZH,QAAAA,KAAK,EAAEY,CADK;AAEZX,QAAAA,IAAI,EAAElC,OAAO,CAAC,KAAKM,KAAN,EAAa,KAAKA,KAAL,CAAW2B,KAAX,GAAmB,GAAnB,GAAyB,CAAtC,CAFD;AAGZE,QAAAA,GAAG,EAAEpC,QAAQ,CAAC,KAAKO,KAAN,EAAa,CAAb;AAHD,OAAd,EAIG,MAAM,KAAK+B,UAAL,CAAgB,KAAK/B,KAArB,CAJT;AAKD,KApH0C;;AAAA,SAsH3C+C,MAtH2C,GAsHjCR,CAAD,IAAO;AACd,WAAKT,QAAL,CAAc;AACZJ,QAAAA,OAAO,EAAEa,CADG;AAEZX,QAAAA,IAAI,EAAElC,OAAO,CAAC,KAAKM,KAAN,EAAa,KAAKA,KAAL,CAAW2B,KAAX,GAAmB,GAAnB,GAAyB,CAAtC,CAFD;AAGZE,QAAAA,GAAG,EAAEpC,QAAQ,CAAC,KAAKO,KAAN,EAAa,CAAb;AAHD,OAAd,EAIG,MAAM,KAAK+B,UAAL,CAAgB,KAAK/B,KAArB,CAJT;AAKD,KA5H0C;;AAAA,SA8H3C+B,UA9H2C,GA8H7BQ,CAAD,IAAO7B,YAAY,CAACsC,OAAb,CAAqB,gBAArB,EAAuCxC,IAAI,CAACyC,SAAL,CAAeV,CAAf,CAAvC,CA9HuB;AAAA;;AAgI3CW,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAE;AAC5B3C,QAAAA,KAAK,EAAE,KAAKP,KADgB;AAE5B+C,QAAAA,MAAM,EAAE,KAAKA,MAFe;AAG5BD,QAAAA,OAAO,EAAE,KAAKA,OAHc;AAI5BL,QAAAA,WAAW,EAAE,KAAKA,WAJU;AAK5BvC,QAAAA,SAAS,EAAE,KAAKA,SALY;AAM5BgC,QAAAA,QAAQ,EAAE,KAAKA,QANa;AAO5BQ,QAAAA,WAAW,EAAC,KAAKA;AAPW,OAA9B;AAAA,gBASG,KAAKS,KAAL,CAAWC;AATd;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AA9I0C","sourcesContent":["import React, { Component } from 'react';\nimport { RevColor, GetMode, GetRgb, LinGrad } from \"./inc/inc\";\n\nexport const ThemeContext = React.createContext();\n\nexport class ThemeProvider extends Component {\n\n  state = {\n    id: 0\n  }\n\n  getThemes = async () => {\n    const url = process.env.REACT_APP_STRAPIURL;\n    let theme = JSON.parse(localStorage.getItem('marccent_theme'));\n    if (!theme) {\n      theme = {};\n      const themeJson = await fetch(`${url}themes/`);\n      const darkJson = await fetch(`${url}options?name=theme_dark`);\n      const lightJson = await fetch(`${url}options?name=theme_light`);\n      theme.list = await themeJson.json();\n      let dark = await darkJson.json();\n      let light = await lightJson.json();\n      theme.id = theme.list[0].id;\n      theme.rgb = {\n        dark: GetRgb(dark[0].value),\n        light: GetRgb(light[0].value),\n        primary: GetRgb(theme.list[0].primary),\n        secondary: GetRgb(theme.list[0].secondary)\n      };\n      theme.hex = {\n        dark: dark[0].value,\n        light: light[0].value,\n        primary: theme.list[0].primary,\n        secondary: theme.list[0].secondary\n      };\n      theme.grad = LinGrad(theme.list[0].primary, theme.list[0].secondary);\n      theme.is_dark = true;\n      theme.glass = false;\n      theme.mode = GetMode(theme, 1);\n      theme.rev = RevColor(theme, 1);\n    }\n    \n    this.setState(theme, () => this.storeTheme(this.state));\n  }\n\n  newState = n => {\n    // let active = {\n    //   id: theme[0].id,\n    //   rgb: {\n    //     dark: temp.rgb.dark,\n    //     light: temp.rgb.light,\n    //     primary: GetRgb(theme[0].primary),\n    //     secondary: GetRgb(theme[0].secondary)\n    //   },\n    //   hex: {\n    //     dark: temp.hex.dark,\n    //     light: temp.hex.light,\n    //     primary: theme[0].primary,\n    //     secondary: theme[0].secondary\n    //   },\n    //   grad: LinGrad(theme[0].primary, theme[0].secondary)\n    // }\n    // active.mode = GetMode(active, 1);\n    // active.rev = RevColor(active, 1);\n    // this.setState(active, () => this.storeTheme(this.state));\n  }\n\n  addTheme = theme => {\n    console.log('at add theme');\n    console.log(theme);\n    let temp = this.state.list;\n    let largest = this.state.list[0].id;\n    for (let i of this.state.list) {\n      if (i.id > largest) largest = i.id\n    }\n    theme.id = largest + 1;\n    temp.push(theme);\n    this.setState({\n      list: temp\n    }, () => {\n      this.updateTheme(theme.id);\n      this.storeTheme(this.state);\n    });\n  }\n\n  removeTheme = (id) => {\n    if (id === this.state.id) {\n      this.updateTheme(this.state.list[0].id);\n    }\n    \n    let updated = this.state.list.filter(theme => theme.id !== id);\n    this.setState({ list: updated }, () => this.storeTheme(this.state));\n  }\n\n  updateTheme = (id) => {\n    let current = this.state.list.filter(i => i.id === id)[0];\n    let temp = this.state;\n    this.setState({\n      id: current.id,\n      rgb: {\n        dark: temp.rgb.dark,\n        light: temp.rgb.light,\n        primary: GetRgb(current.primary),\n        secondary: GetRgb(current.secondary)\n      },\n      hex: {\n        dark: temp.hex.dark,\n        light: temp.hex.light,\n        primary: current.primary,\n        secondary: current.secondary\n      },\n      grad: LinGrad(current.primary, current.secondary)\n    }, () => this.storeTheme(this.state));\n  }\n\n  isGlass = (i) => {\n    this.setState({ \n      glass: i,\n      mode: GetMode(this.state, this.state.glass ? 0.6 : 1),\n      rev: RevColor(this.state, 1)\n    }, () => this.storeTheme(this.state));\n  }\n\n  isDark = (i) => {\n    this.setState({\n      is_dark: i,\n      mode: GetMode(this.state, this.state.glass ? 0.6 : 1),\n      rev: RevColor(this.state, 1)\n    }, () => this.storeTheme(this.state));\n  }\n\n  storeTheme = (i) => localStorage.setItem('marccent_theme', JSON.stringify(i));\n\n  render() {\n    return (\n      <ThemeContext.Provider value={{\n        theme: this.state, \n        isDark: this.isDark,\n        isGlass: this.isGlass,\n        updateTheme: this.updateTheme,\n        getThemes: this.getThemes,\n        addTheme: this.addTheme,\n        removeTheme:this.removeTheme,\n      }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}