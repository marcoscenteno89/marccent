{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nvar GA4ReactGlobalIndex = '__ga4React__';\n/**\r\n * @desc class required to manage google analitycs 4\r\n * @class GA4React\r\n *  */\n\nclass GA4React {\n  constructor(gaCode, gaConfig, additionalGaCode, timeout, options) {\n    this.gaCode = gaCode;\n    this.gaConfig = gaConfig;\n    this.additionalGaCode = additionalGaCode;\n    this.timeout = timeout;\n    this.options = options;\n    this.scriptSyncId = 'ga4ReactScriptSync';\n    this.scriptAsyncId = 'ga4ReactScriptAsync';\n    this.nonceAsync = '';\n    this.nonceSync = '';\n    this.gaConfig = gaConfig ? gaConfig : {};\n    this.gaCode = gaCode;\n    this.timeout = timeout || 5000;\n    this.additionalGaCode = additionalGaCode;\n    this.options = options;\n\n    if (this.options) {\n      var {\n        nonce\n      } = this.options;\n      this.nonceAsync = nonce && nonce[0] ? nonce[0] : '';\n      this.nonceSync = nonce && nonce[1] ? nonce[1] : '';\n    }\n  }\n  /**\r\n   * @desc output on resolve initialization\r\n   */\n\n\n  outputOnResolve() {\n    return {\n      pageview: this.pageview,\n      event: this.event,\n      gtag: this.gtag\n    };\n  }\n  /**\r\n   * @desc Return main function for send ga4 events, pageview etc\r\n   * @returns {Promise<GA4ReactResolveInterface>}\r\n   */\n\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      if (GA4React.isInitialized()) {\n        reject(new Error('GA4React is being initialized'));\n      } // in case of retry logics, remove previous scripts\n\n\n      var previousScriptAsync = document.getElementById(this.scriptAsyncId);\n\n      if (previousScriptAsync) {\n        previousScriptAsync.remove();\n      }\n\n      var head = document.getElementsByTagName('head')[0];\n      var scriptAsync = document.createElement('script');\n      scriptAsync.setAttribute('id', this.scriptAsyncId);\n      scriptAsync.setAttribute('async', '');\n\n      if (this.nonceAsync && typeof this.nonceAsync === 'string' && this.nonceAsync.length > 0) {\n        scriptAsync.setAttribute('nonce', this.nonceAsync);\n      }\n\n      scriptAsync.setAttribute('src', \"https://www.googletagmanager.com/gtag/js?id=\" + this.gaCode);\n\n      scriptAsync.onload = () => {\n        var target = document.getElementById(this.scriptSyncId);\n\n        if (target) {\n          target.remove();\n        } // in case of retry logics, remove previous script sync\n\n\n        var previousScriptSync = document.getElementById(this.scriptSyncId);\n\n        if (previousScriptSync) {\n          previousScriptSync.remove();\n        }\n\n        var scriptSync = document.createElement('script');\n        scriptSync.setAttribute('id', this.scriptSyncId);\n\n        if (this.nonceSync && typeof this.nonceSync === 'string' && this.nonceSync.length > 0) {\n          scriptSync.setAttribute('nonce', this.nonceSync);\n        }\n\n        var scriptHTML = \"window.dataLayer = window.dataLayer || [];\\n        function gtag(){dataLayer.push(arguments);};\\n        gtag('js', new Date());\\n        gtag('config', '\" + this.gaCode + \"', \" + JSON.stringify(this.gaConfig) + \");\";\n\n        if (this.additionalGaCode) {\n          this.additionalGaCode.forEach(code => {\n            scriptHTML += \"\\ngtag('config', '\" + code + \"', \" + JSON.stringify(this.gaConfig) + \");\";\n          });\n        }\n\n        scriptSync.innerHTML = scriptHTML;\n        head.appendChild(scriptSync);\n        var resolved = this.outputOnResolve();\n        Object.assign(window, {\n          [GA4ReactGlobalIndex]: resolved\n        });\n        resolve(resolved);\n      };\n\n      scriptAsync.onerror = event => {\n        if (typeof event === 'string') {\n          reject(\"GA4React intialization failed \" + event);\n        } else {\n          var error = new Error();\n          error.name = 'GA4React intialization failed';\n          error.message = JSON.stringify(event, ['message', 'arguments', 'type', 'name']);\n          reject(error);\n        }\n      };\n\n      var onChangeReadyState = () => {\n        switch (document.readyState) {\n          case 'interactive':\n          case 'complete':\n            if (!GA4React.isInitialized()) {\n              head.appendChild(scriptAsync);\n              document.removeEventListener('readystatechange', onChangeReadyState);\n            }\n\n            break;\n        }\n      };\n\n      if (document.readyState !== 'complete') {\n        document.addEventListener('readystatechange', onChangeReadyState);\n      } else {\n        onChangeReadyState();\n      }\n\n      setTimeout(() => {\n        reject(new Error('GA4React Timeout'));\n      }, this.timeout);\n    });\n  }\n  /**\r\n   * @desc send pageview event to gtag\r\n   * @param path\r\n   */\n\n\n  pageview(path, location, title) {\n    return this.gtag('event', 'page_view', {\n      page_path: path,\n      page_location: location || window.location,\n      page_title: title || document.title\n    });\n  }\n  /**\r\n   * @desc set event and send to gtag\r\n   * @param action\r\n   * @param label\r\n   * @param category\r\n   * @param nonInteraction\r\n   */\n\n\n  event(action, label, category, nonInteraction) {\n    if (nonInteraction === void 0) {\n      nonInteraction = false;\n    }\n\n    return this.gtag('event', action, {\n      event_label: label,\n      event_category: category,\n      non_interaction: nonInteraction\n    });\n  }\n  /**\r\n   * @desc direct access to gtag\r\n   * @param args\r\n   */\n\n\n  gtag() {\n    //@ts-ignore\n    return window.gtag(...arguments);\n  }\n  /**\r\n   * @desc ga is initialized?\r\n   */\n\n\n  static isInitialized() {\n    switch (typeof window[GA4ReactGlobalIndex] !== 'undefined') {\n      case true:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n  /**\r\n   * @desc get ga4react from global\r\n   */\n\n\n  static getGA4React() {\n    if (GA4React.isInitialized()) {\n      return window[GA4ReactGlobalIndex];\n    } else {\n      console.error(new Error('GA4React is not initialized'));\n    }\n  }\n\n}\n\nvar outputGA4 = (children, setComponents, ga4) => {\n  setComponents(React.Children.map(children, (child, index) => {\n    if (!React.isValidElement(child)) {\n      return React.createElement(React.Fragment, null, child);\n    } //@ts-ignore\n\n\n    if (child.type && typeof child.type.name !== 'undefined') {\n      return React.cloneElement(child, {\n        //@ts-ignore\n        ga4: ga4,\n        index\n      });\n    } else {\n      return child;\n    }\n  }));\n};\n\nvar GA4R = _ref => {\n  var {\n    code,\n    timeout,\n    config,\n    additionalCode,\n    children,\n    options\n  } = _ref;\n  var [components, setComponents] = useState(null);\n  useEffect(() => {\n    if (!GA4React.isInitialized()) {\n      var ga4manager = new GA4React(\"\" + code, config, additionalCode, timeout, options);\n      ga4manager.initialize().then(ga4 => {\n        outputGA4(children, setComponents, ga4);\n      }, err => {\n        console.error(err);\n      });\n    } else {\n      var ga4 = GA4React.getGA4React();\n\n      if (ga4) {\n        outputGA4(children, setComponents, ga4);\n      }\n    }\n  }, []);\n  return React.createElement(React.Fragment, null, components);\n};\n\nvar useGA4React = (gaCode, gaConfig, gaAdditionalCode, gaTimeout, options) => {\n  var [ga4, setGA4] = useState(undefined);\n  useEffect(() => {\n    if (gaCode) {\n      switch (GA4React.isInitialized()) {\n        case false:\n          var ga4react = new GA4React(\"\" + gaCode, gaConfig, gaAdditionalCode, gaTimeout, options);\n          ga4react.initialize().then(ga4 => {\n            setGA4(ga4);\n          }, err => {\n            console.error(err);\n          });\n          break;\n\n        case true:\n          setGA4(GA4React.getGA4React());\n          break;\n      }\n    } else {\n      setGA4(GA4React.getGA4React());\n    }\n  }, [gaCode]);\n  return ga4;\n};\n\nfunction withTracker(MyComponent) {\n  return props => {\n    var {\n      path,\n      location,\n      title,\n      gaCode,\n      gaTimeout,\n      gaConfig,\n      gaAdditionalCode,\n      options\n    } = props;\n    useEffect(() => {\n      switch (GA4React.isInitialized()) {\n        case true:\n          var ga4 = GA4React.getGA4React();\n\n          if (ga4) {\n            ga4.pageview(path, location, title);\n          }\n\n          break;\n\n        default:\n        case false:\n          var ga4react = new GA4React(\"\" + gaCode, gaConfig, gaAdditionalCode, gaTimeout, options);\n          ga4react.initialize().then(ga4 => {\n            ga4.pageview(path, location, title);\n          }, err => {\n            console.error(err);\n          });\n          break;\n      }\n    });\n    return React.createElement(MyComponent, Object.assign({}, props));\n  };\n}\n\nexport default GA4React;\nexport { GA4R, GA4React, useGA4React, withTracker };","map":{"version":3,"sources":["../src/lib/ga4manager.tsx","../src/components/GA4RComponents.tsx","../src/hooks/useGA4React.tsx","../src/components/withTracker.tsx"],"names":["GA4ReactGlobalIndex","GA4React","constructor","gaConfig","timeout","nonce","outputOnResolve","pageview","event","gtag","initialize","reject","previousScriptAsync","document","head","scriptAsync","target","previousScriptSync","scriptSync","scriptHTML","JSON","code","resolved","Object","resolve","error","onChangeReadyState","setTimeout","page_path","page_location","location","window","page_title","title","nonInteraction","event_label","event_category","non_interaction","isInitialized","getGA4React","console","outputGA4","setComponents","React","child","ga4","index","GA4R","options","useState","useEffect","ga4manager","err","useGA4React","ga4react","setGA4","withTracker","MyComponent","props"],"mappings":"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","sourcesContent":["import {\n  GA4Config,\n  GA4ManagerOptionsInterface,\n  GA4ReactInterface,\n  GA4ReactResolveInterface,\n  gtagAction,\n  gtagCategory,\n  gtagFunction,\n  gtagLabel,\n} from '../models/gtagModels';\n\nexport const GA4ReactGlobalIndex = '__ga4React__';\n\ndeclare global {\n  interface Window {\n    gtag: gtagFunction | Function;\n    __ga4React__: GA4ReactResolveInterface;\n  }\n}\n\n/**\n * @desc class required to manage google analitycs 4\n * @class GA4React\n *  */\nexport class GA4React implements GA4ReactInterface {\n  private scriptSyncId: string = 'ga4ReactScriptSync';\n  private scriptAsyncId: string = 'ga4ReactScriptAsync';\n  private nonceAsync: string = '';\n  private nonceSync: string = '';\n  constructor(\n    private gaCode: string,\n    private gaConfig?: GA4Config,\n    private additionalGaCode?: Array<string>,\n    private timeout?: number,\n    private options?: GA4ManagerOptionsInterface\n  ) {\n    this.gaConfig = gaConfig ? gaConfig : {};\n    this.gaCode = gaCode;\n    this.timeout = timeout || 5000;\n    this.additionalGaCode = additionalGaCode;\n    this.options = options;\n\n    if (this.options) {\n      const { nonce } = this.options;\n      this.nonceAsync = nonce && nonce[0] ? nonce[0] : '';\n      this.nonceSync = nonce && nonce[1] ? nonce[1] : '';\n    }\n  }\n\n  /**\n   * @desc output on resolve initialization\n   */\n  private outputOnResolve(): GA4ReactResolveInterface {\n    return {\n      pageview: this.pageview,\n      event: this.event,\n      gtag: this.gtag,\n    };\n  }\n\n  /**\n   * @desc Return main function for send ga4 events, pageview etc\n   * @returns {Promise<GA4ReactResolveInterface>}\n   */\n  public initialize(): Promise<GA4ReactResolveInterface> {\n    return new Promise((resolve, reject) => {\n      if (GA4React.isInitialized()) {\n        reject(new Error('GA4React is being initialized'));\n      }\n\n      // in case of retry logics, remove previous scripts\n      const previousScriptAsync = document.getElementById(this.scriptAsyncId);\n      if (previousScriptAsync) {\n        previousScriptAsync.remove();\n      }\n\n      const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\n      const scriptAsync: HTMLScriptElement = document.createElement('script');\n      scriptAsync.setAttribute('id', this.scriptAsyncId);\n      scriptAsync.setAttribute('async', '');\n\n      if (\n        this.nonceAsync &&\n        typeof this.nonceAsync === 'string' &&\n        this.nonceAsync.length > 0\n      ) {\n        scriptAsync.setAttribute('nonce', this.nonceAsync);\n      }\n\n      scriptAsync.setAttribute(\n        'src',\n        `https://www.googletagmanager.com/gtag/js?id=${this.gaCode}`\n      );\n      scriptAsync.onload = () => {\n        const target: HTMLElement | null = document.getElementById(\n          this.scriptSyncId\n        );\n        if (target) {\n          target.remove();\n        }\n\n        // in case of retry logics, remove previous script sync\n        const previousScriptSync = document.getElementById(this.scriptSyncId);\n        if (previousScriptSync) {\n          previousScriptSync.remove();\n        }\n\n        const scriptSync: HTMLScriptElement = document.createElement('script');\n\n        scriptSync.setAttribute('id', this.scriptSyncId);\n\n        if (\n          this.nonceSync &&\n          typeof this.nonceSync === 'string' &&\n          this.nonceSync.length > 0\n        ) {\n          scriptSync.setAttribute('nonce', this.nonceSync);\n        }\n\n        let scriptHTML: string = `window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);};\n        gtag('js', new Date());\n        gtag('config', '${this.gaCode}', ${JSON.stringify(this.gaConfig)});`;\n\n        if (this.additionalGaCode) {\n          this.additionalGaCode.forEach((code: string) => {\n            scriptHTML += `\\ngtag('config', '${code}', ${JSON.stringify(\n              this.gaConfig\n            )});`;\n          });\n        }\n\n        scriptSync.innerHTML = scriptHTML;\n\n        head.appendChild(scriptSync);\n\n        const resolved: GA4ReactResolveInterface = this.outputOnResolve();\n\n        Object.assign(window, { [GA4ReactGlobalIndex]: resolved });\n\n        resolve(resolved);\n      };\n\n      scriptAsync.onerror = (event: Event | string): void => {\n        if (typeof event === 'string') {\n          reject(`GA4React intialization failed ${event}`);\n        } else {\n          const error = new Error();\n          error.name = 'GA4React intialization failed';\n          error.message = JSON.stringify(event, [\n            'message',\n            'arguments',\n            'type',\n            'name',\n          ]);\n          reject(error);\n        }\n      };\n\n      const onChangeReadyState = () => {\n        switch (document.readyState) {\n          case 'interactive':\n          case 'complete':\n            if (!GA4React.isInitialized()) {\n              head.appendChild(scriptAsync);\n              document.removeEventListener(\n                'readystatechange',\n                onChangeReadyState\n              );\n            }\n            break;\n        }\n      };\n\n      if (document.readyState !== 'complete') {\n        document.addEventListener('readystatechange', onChangeReadyState);\n      } else {\n        onChangeReadyState();\n      }\n\n      setTimeout(() => {\n        reject(new Error('GA4React Timeout'));\n      }, this.timeout);\n    });\n  }\n\n  /**\n   * @desc send pageview event to gtag\n   * @param path\n   */\n  public pageview(\n    path: string | Location,\n    location?: string | Location,\n    title?: string\n  ): any {\n    return this.gtag('event', 'page_view', {\n      page_path: path,\n      page_location: location || window.location,\n      page_title: title || document.title,\n    });\n  }\n\n  /**\n   * @desc set event and send to gtag\n   * @param action\n   * @param label\n   * @param category\n   * @param nonInteraction\n   */\n  public event(\n    action: gtagAction,\n    label: gtagLabel,\n    category: gtagCategory,\n    nonInteraction: boolean = false\n  ): any {\n    return this.gtag('event', action, {\n      event_label: label,\n      event_category: category,\n      non_interaction: nonInteraction,\n    });\n  }\n\n  /**\n   * @desc direct access to gtag\n   * @param args\n   */\n  public gtag(...args: any): any {\n    //@ts-ignore\n    return window.gtag(...args);\n  }\n\n  /**\n   * @desc ga is initialized?\n   */\n  static isInitialized(): boolean {\n    switch (typeof window[GA4ReactGlobalIndex] !== 'undefined') {\n      case true:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * @desc get ga4react from global\n   */\n  static getGA4React(): GA4ReactResolveInterface | void {\n    if (GA4React.isInitialized()) {\n      return window[GA4ReactGlobalIndex];\n    } else {\n      console.error(new Error('GA4React is not initialized'));\n    }\n  }\n}\n\nexport default GA4React;\n","import React, { useState, useEffect } from 'react';\nimport GA4React from './../lib/ga4manager';\nimport {\n  GA4Config,\n  GA4ManagerOptionsInterface,\n  GA4ReactResolveInterface,\n} from '../models/gtagModels';\n\nexport interface IGA4R {\n  code: string;\n  timeout?: number;\n  config?: GA4Config;\n  additionalCode?: Array<string>;\n  children?: any;\n  options?: GA4ManagerOptionsInterface;\n}\n\nconst outputGA4 = (\n  children: any,\n  setComponents: Function,\n  ga4: GA4ReactResolveInterface\n) => {\n  setComponents(\n    React.Children.map(children, (child: React.ReactChildren, index) => {\n      if (!React.isValidElement(child)) {\n        return <React.Fragment>{child}</React.Fragment>;\n      }\n\n      //@ts-ignore\n      if (child.type && typeof child.type.name !== 'undefined') {\n        return React.cloneElement(child, {\n          //@ts-ignore\n          ga4: ga4,\n          index,\n        });\n      } else {\n        return child;\n      }\n    })\n  );\n};\n\nexport const GA4R: React.FC<IGA4R> = ({\n  code,\n  timeout,\n  config,\n  additionalCode,\n  children,\n  options,\n}) => {\n  const [components, setComponents] = useState<any>(null);\n\n  useEffect(() => {\n    if (!GA4React.isInitialized()) {\n      const ga4manager = new GA4React(\n        `${code}`,\n        config,\n        additionalCode,\n        timeout,\n        options\n      );\n      ga4manager.initialize().then(\n        (ga4: GA4ReactResolveInterface) => {\n          outputGA4(children, setComponents, ga4);\n        },\n        err => {\n          console.error(err);\n        }\n      );\n    } else {\n      const ga4 = GA4React.getGA4React();\n      if (ga4) {\n        outputGA4(children, setComponents, ga4);\n      }\n    }\n  }, []);\n\n  return <>{components}</>;\n};\n\nexport default GA4R;\n","import { useState, useEffect } from 'react';\nimport GA4React from '../lib/ga4manager';\n\nimport {\n  GA4Config,\n  GA4ManagerOptionsInterface,\n  GA4ReactResolveInterface,\n} from '../models/gtagModels';\n\nexport const useGA4React = (\n  gaCode?: string,\n  gaConfig?: GA4Config | object,\n  gaAdditionalCode?: Array<string>,\n  gaTimeout?: number,\n  options?: GA4ManagerOptionsInterface\n): GA4ReactResolveInterface | void => {\n  const [ga4, setGA4] = useState<GA4ReactResolveInterface | void>(undefined);\n  useEffect(() => {\n    if (gaCode) {\n      switch (GA4React.isInitialized()) {\n        case false:\n          const ga4react = new GA4React(\n            `${gaCode}`,\n            gaConfig,\n            gaAdditionalCode,\n            gaTimeout,\n            options\n          );\n          ga4react.initialize().then(\n            (ga4: GA4ReactResolveInterface) => {\n              setGA4(ga4);\n            },\n            (err: Error) => {\n              console.error(err);\n            }\n          );\n          break;\n        case true:\n          setGA4(GA4React.getGA4React());\n          break;\n      }\n    } else {\n      setGA4(GA4React.getGA4React());\n    }\n  }, [gaCode]);\n  return ga4;\n};\n","import React, { useEffect } from 'react';\nimport GA4React from '../lib/ga4manager';\n\nimport {\n  GA4Config,\n  GA4ManagerOptionsInterface,\n  GA4ReactResolveInterface,\n} from '../models/gtagModels';\n\nexport interface GA4WithTrackerComponentInterface {\n  path: string | Location;\n  location?: string | Location;\n  title?: string;\n  gaCode?: string;\n  gaConfig?: GA4Config | object;\n  additionalCode?: Array<string>;\n  timeout?: number;\n  options?: GA4ManagerOptionsInterface;\n}\n\nexport function withTracker(\n  MyComponent: React.FC<any>\n): React.FC<GA4WithTrackerComponentInterface> {\n  return (props: GA4WithTrackerComponentInterface & any) => {\n    const {\n      path,\n      location,\n      title,\n      gaCode,\n      gaTimeout,\n      gaConfig,\n      gaAdditionalCode,\n      options,\n    } = props;\n    useEffect(() => {\n      switch (GA4React.isInitialized()) {\n        case true:\n          const ga4 = GA4React.getGA4React();\n          if (ga4) {\n            ga4.pageview(path, location, title);\n          }\n          break;\n        default:\n        case false:\n          const ga4react = new GA4React(\n            `${gaCode}`,\n            gaConfig,\n            gaAdditionalCode,\n            gaTimeout,\n            options\n          );\n          ga4react.initialize().then(\n            (ga4: GA4ReactResolveInterface) => {\n              ga4.pageview(path, location, title);\n            },\n            (err: Error) => {\n              console.error(err);\n            }\n          );\n          break;\n      }\n    });\n    return <MyComponent {...props} />;\n  };\n}\n\nexport default withTracker;\n"]},"metadata":{},"sourceType":"module"}